package cnuphys.splot.example;

import java.util.Collection;

import cnuphys.splot.fit.FitType;
import cnuphys.splot.pdata.DataColumn;
import cnuphys.splot.pdata.DataColumnType;
import cnuphys.splot.pdata.DataSet;
import cnuphys.splot.pdata.DataSetException;
import cnuphys.splot.pdata.DataSetType;

public class AnotherGaussian extends AExample {

    // static double rawData[] = {
    // 0.500000, 0.000000, 0.000000,
    // 1.500000, 0.000000, 0.000000,
    // 2.500000, 0.000000, 0.000000,
    // 3.500000, 0.000000, 0.000000,
    // 4.500000, 0.000000, 0.000000,
    // 5.500000, 0.000000, 0.000000,
    // 6.500000, 0.000000, 0.000000,
    // 7.500000, 0.000000, 0.000000,
    // 8.500000, 0.000000, 0.000000,
    // 9.500000, 0.000000, 0.000000,
    // 10.500000, 0.000000, 0.000000,
    // 11.500000, 0.000000, 0.000000,
    // 12.500000, 0.000000, 0.000000,
    // 13.500000, 0.000000, 0.000000,
    // 14.500000, 0.000000, 0.000000,
    // 15.500000, 0.000000, 0.000000,
    // 16.500000, 0.000000, 0.000000,
    // 17.500000, 0.000000, 0.000000,
    // 18.500000, 0.000000, 0.000000,
    // 19.500000, 0.000000, 0.000000,
    // 20.500000, 0.000000, 0.000000,
    // 21.500000, 0.000000, 0.000000,
    // 22.500000, 0.000000, 0.000000,
    // 23.500000, 0.000000, 0.000000,
    // 24.500000, 0.000000, 0.000000,
    // 25.500000, 0.000000, 0.000000,
    // 26.500000, 0.000000, 0.000000,
    // 27.500000, 0.000000, 0.000000,
    // 28.500000, 0.000000, 0.000000,
    // 29.500000, 0.000000, 0.000000,
    // 30.500000, 0.000000, 0.000000,
    // 31.500000, 0.000000, 0.000000,
    // 32.500000, 0.000000, 0.000000,
    // 33.500000, 0.000000, 0.000000,
    // 34.500000, 0.000000, 0.000000,
    // 35.500000, 0.000000, 0.000000,
    // 36.500000, 0.000000, 0.000000,
    // 37.500000, 0.000000, 0.000000,
    // 38.500000, 0.000000, 0.000000,
    // 39.500000, 0.000000, 0.000000,
    // 40.500000, 0.000000, 0.000000,
    // 41.500000, 0.000000, 0.000000,
    // 42.500000, 0.000000, 0.000000,
    // 43.500000, 0.000000, 0.000000,
    // 44.500000, 0.000000, 0.000000,
    // 45.500000, 0.000000, 0.000000,
    // 46.500000, 0.000000, 0.000000,
    // 47.500000, 0.000000, 0.000000,
    // 48.500000, 0.000000, 0.000000,
    // 49.500000, 0.000000, 0.000000,
    // 50.500000, 0.000000, 0.000000,
    // 51.500000, 0.000000, 0.000000,
    // 52.500000, 0.000000, 0.000000,
    // 53.500000, 0.000000, 0.000000,
    // 54.500000, 0.000000, 0.000000,
    // 55.500000, 0.000000, 0.000000,
    // 56.500000, 0.000000, 0.000000,
    // 57.500000, 0.000000, 0.000000,
    // 58.500000, 0.000000, 0.000000,
    // 59.500000, 0.000000, 0.000000,
    // 60.500000, 0.000000, 0.000000,
    // 61.500000, 0.000000, 0.000000,
    // 62.500000, 0.000000, 0.000000,
    // 63.500000, 0.000000, 0.000000,
    // 64.500000, 0.000000, 0.000000,
    // 65.500000, 0.000000, 0.000000,
    // 66.500000, 0.000000, 0.000000,
    // 67.500000, 0.000000, 0.000000,
    // 68.500000, 0.000000, 0.000000,
    // 69.500000, 0.000000, 0.000000,
    // 70.500000, 0.000000, 0.000000,
    // 71.500000, 0.000000, 0.000000,
    // 72.500000, 0.000000, 0.000000,
    // 73.500000, 0.000000, 0.000000,
    // 74.500000, 0.000000, 0.000000,
    // 75.500000, 0.000000, 0.000000,
    // 76.500000, 0.000000, 0.000000,
    // 77.500000, 0.000000, 0.000000,
    // 78.500000, 0.000000, 0.000000,
    // 79.500000, 2.000000, 1.414214,
    // 80.500000, 8.000000, 2.828427,
    // 81.500000, 6.000000, 2.449490,
    // 82.500000, 8.000000, 2.828427,
    // 83.500000, 22.000000, 4.690416,
    // 84.500000, 28.000000, 5.291503,
    // 85.500000, 29.000000, 5.385165,
    // 86.500000, 21.000000, 4.582576,
    // 87.500000, 4.000000, 2.000000,
    // 88.500000, 0.000000, 0.000000,
    // 89.500000, 0.000000, 0.000000,
    // 90.500000, 0.000000, 0.000000,
    // 91.500000, 0.000000, 0.000000,
    // 92.500000, 0.000000, 0.000000,
    // 93.500000, 0.000000, 0.000000,
    // 94.500000, 0.000000, 0.000000,
    // 95.500000, 0.000000, 0.000000,
    // 96.500000, 0.000000, 0.000000,
    // 97.500000, 0.000000, 0.000000,
    // 98.500000, 0.000000, 0.000000,
    // 99.500000, 0.000000, 0.000000,
    // 100.500000, 0.000000, 0.000000,
    // 101.500000, 0.000000, 0.000000,
    // 102.500000, 0.000000, 0.000000,
    // 103.500000, 0.000000, 0.000000,
    // 104.500000, 0.000000, 0.000000,
    // 105.500000, 0.000000, 0.000000,
    // 106.500000, 0.000000, 0.000000,
    // 107.500000, 0.000000, 0.000000,
    // 108.500000, 0.000000, 0.000000,
    // 109.500000, 0.000000, 0.000000
    // };

    static double rawData[] = { 17200.000000, 0.000000, 0.000000, 17600.000000,
	    0.000000, 0.000000, 18000.000000, 0.000000, 0.000000, 18400.000000,
	    0.000000, 0.000000, 18800.000000, 0.000000, 0.000000, 19200.000000,
	    0.000000, 0.000000, 19600.000000, 0.000000, 0.000000, 20000.000000,
	    0.000000, 0.000000, 20400.000000, 0.000000, 0.000000, 20800.000000,
	    0.000000, 0.000000, 21200.000000, 0.000000, 0.000000, 21600.000000,
	    0.000000, 0.000000, 22000.000000, 0.000000, 0.000000, 22400.000000,
	    0.000000, 0.000000, 22800.000000, 1.000000, 1.000000, 23200.000000,
	    2.000000, 1.414214, 23600.000000, 7.000000, 2.645751, 24000.000000,
	    32.000000, 5.656854, 24400.000000, 33.000000, 5.744563,
	    24800.000000, 28.000000, 5.291503, 25200.000000, 20.000000,
	    4.472136, 25600.000000, 3.000000, 1.732051, 26000.000000, 2.000000,
	    1.414214, 26400.000000, 0.000000, 0.000000, 26800.000000, 0.000000,
	    0.000000, 27200.000000, 0.000000, 0.000000, 27600.000000, 0.000000,
	    0.000000, 28000.000000, 0.000000, 0.000000, 28400.000000, 0.000000,
	    0.000000, 28800.000000, 0.000000, 0.000000, 29200.000000, 0.000000,
	    0.000000, 29600.000000, 0.000000, 0.000000, 30000.000000, 0.000000,
	    0.000000, 30400.000000, 0.000000, 0.000000, 30800.000000, 0.000000,
	    0.000000, 31200.000000, 0.000000, 0.000000, 31600.000000, 0.000000,
	    0.000000, 32000.000000, 0.000000, 0.000000, 32400.000000, 0.000000,
	    0.000000, 32800.000000, 0.000000, 0.000000 };

    @Override
    protected DataSet createDataSet() throws DataSetException {
	return new DataSet(DataSetType.XYEXYE, getColumnNames());
    }

    @Override
    protected String[] getColumnNames() {
	String names[] = { "X", "Y", "E" };
	return names;
    }

    @Override
    protected String getXAxisLabel() {
	return "<html>Channel";
    }

    @Override
    protected String getYAxisLabel() {
	return "<html>Counts";
    }

    @Override
    protected String getPlotTitle() {
	return "<html>Fit to Gaussian";
    }

    @Override
    public void fillData() {
	DataSet ds = _canvas.getDataSet();

	for (int i = 0; i < rawData.length; i += 3) {

	    try {
		ds.add(rawData[i], rawData[i + 1], rawData[i + 2]);
	    } catch (DataSetException e) {
		e.printStackTrace();
		System.exit(1);
	    }
	}
    }

    @Override
    public void setPreferences() {
	DataSet ds = _canvas.getDataSet();
	Collection<DataColumn> ycols = ds.getAllColumnsByType(DataColumnType.Y);
	for (DataColumn dc : ycols) {
	    dc.getFit().setFitType(FitType.GAUSSIANS);
	    dc.getFit().setNumGaussian(1);
	}

    }

    public static void main(String arg[]) {
	final AnotherGaussian example = new AnotherGaussian();

	javax.swing.SwingUtilities.invokeLater(new Runnable() {
	    @Override
	    public void run() {
		example.setVisible(true);
	    }
	});

    }

}
